{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Practica 5 - Redes neuronales"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Miguel Angel Carvajal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import networkx as nx\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Ejercicio 1\n",
    "La regla XOR tiene dos entradas (+1 o -1) y la salida es -1 si am- bas son diferentes y +1 si ambas son iguales. Utilizar el algoritmo de retropropagacio ÃÅon de errores para aprender el XOR en las siguientes arquitecturas (incluir unidades de entrada adicional para simular los umbrales). Comparar el tiempo de convergencia."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Item a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAmkAAAGqCAYAAABQ5dNVAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3X+0VXWd//E3FxSTluYNSsls0GbU0VAZBtN04oJTOlQg\nBmxMwKFc37GxaWxmlc2qrDU/ljB9mbJZpktLFJMNeFEMMoUFmr8ZC1GnsmkJrRB0gSIaKA7c8/3j\nfkGBy7333PNr730ej7XmH8+9h03jlRefc/Z59iuVSqUAACBTWhp9AQAAHMhIAwDIICMNACCDjDQA\ngAwy0gAAMshIAwDIICMNACCDjDQAgAwy0gAAMshIAwDIICMNACCDjDQAgAwy0gAAMshIAwDIICMN\nACCDjDQAgAwy0gAAMshIAwDIICMNACCDjDQAgAwy0gAAMshIAwDIICMNACCDjDQAgAwy0gAAMshI\nAwDIICMNACCDjDQAgAwy0gAAMshIAwDIICMNACCDBjT6Agpjw4aI1asjtmyJGDw4YtSoiGOPbfRV\nAQA5ZaRVolSKaG+PSNOIlSsjtm5967HW1oi2toipUyMmTozo169x1wkA5E6/UqlUavRF5NKmTRGX\nXBJx//0RHR0H/7qWlojRoyNuuy3imGPqdXUAQM4ZaX2xaVPEuHERa9b0/ntGjIhYutRQAwB6xUgr\nV6kUcd55nS9vlmvs2Ijly730CQD0yN2d5Wpv73yJsy9WrYq4886qXg4AUExGWrnStPv3oHWnoyPi\n9turez0AQCF5ubMcGzZEDB++712c5WptjVi71sdzAADdcpJWjtWrKxtoEREvvxzxxBPVuR4AoLCM\ntHJs2VKd59m8uTrPAwAUlpFWjsGDq/M8Q4ZU53kAgMIy0soxalTEUUdV9BQ7Dj88fv/e91bpggCA\nojLSynHssRFjxlT0FL9673tjxKc+FWeddVZ897vfjY0bN1bp4gCAIjHSypUknamnPujo1y/+7Nvf\njo0bN8bVV18da9asiVNOOSXa2trihhtuiC3Ves8bAJB7Rlq5Lrqos8XZB48ddlhc0t4ef/jDH+L8\n88+PuXPnxqZNm+KLX/xirFq1Kk444YS44IIL4pZbbolt27ZV97oBgFwx0srVr19nLH3EiPK+b8SI\nOP2ZZ+Ko1tYYPnx4LF++PCIiDjvssJgwYUKkaRrPP/98zJgxI+6888447rjj4sILL4wFCxbE9u3b\na/AbAQCyzIfZ9tWmTRGXXNKZiOquQNDSEtHW1jnsjj46IiKWL18en/3sZ+NTn/pUzJo1KwYNGnTA\nt73yyitx1113RZqm8dhjj8UFF1wQSZLE+eefHwMHDqzRbwoAyAojrRKlUmeL8/bbO7ucL7/81mOt\nrZ03GUydGnHhhQdE1V955ZX4whe+EI8//njceuut8eEPf/igv8zmzZujvb090jSNp556KsaPHx9J\nksSYMWPikEMOqdXvDgBoICOtWjZs6CwJbN7c+TloI0f2Kv10xx13xBVXXBGf+9zn4hvf+EYceuih\n3X79888/H4sWLYo0TeO5556Liy66KJIkiXPOOSf69+9frd8NANBgRloGvPDCC3HZZZfFhg0bYt68\neXHqqaf26vvWrVsXCxYsiDRNY/PmzTF58uRIkiRGjRoV/fY7uQMA8sVIy4hSqRQ//OEP46qrroqv\nfOUrceWVV5Z1MvarX/0qFixYEPPnz48333wzkiSJJEli+PDhBhsA5JCRljHr1q2LGTNmRETELbfc\nEsOGDSvr+0ulUqxduzbSNI00TeMd73jH3sF24okn1uKSAYAa8BEcGTNs2LBYtWpVjB8/PkaNGhU3\n3XRTlLOj+/XrF6effnpcc801sW7durj55ptj69at0dbWFmeccUbMmjUr1q9fX7vfAABQFU7SMuyZ\nZ56J6dOnx9ChQ+Omm26Ko///R3j0xe7du+PBBx+MNE2jvb09PvjBD0aSJDFp0qQYOnRoFa8aAKgG\nJ2kZduqpp8Zjjz0WZ5xxRpx++ulxxx139Pm5+vfvH6NHj47rr79elgoAcsBJWk48/vjjMW3atBg1\nalR873vfi6OOOqoqz/vGG2/ET3/600jTNO655544++yzI0mSmDBhQhx55JFV+TUAgPI5ScuJM888\nM5588sk46qij9slKVUqWCgCyyUlaDvUmK1UpWSoAaCwjLafKyUpVSpYKAOrPSMu5crNSlTpYlurc\nc8+NlhavngNAtRhpBdDXrFSlZKkAoHaMtIKoNCtVKVkqAKguI61g1q1bF5deemmUSqU+ZaUqJUsF\nANXhTUQFU2lWqlKyVABQHU7SCqyaWalKyVIBQHmcpBVYNbNSlZKlAoDyOElrErXKSlVKlgoAuuYk\nrUnUKitVKVkqAOiak7QmVI+sVKVkqQBodkZak6pnVqpSslQANCMjrcnVOytVKVkqAJqFkUbDslKV\n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\nWSZyw0gD9iHrRFH8+te/jhtvvFGWidwy0oB9PPnkk10ONFkn8ubpp5+OOXPmdPs1skxkmZEG7OPd\n7353tLa2xssvvxwRsk7kz//+7//GypUr4+677+7ycVkm8sK/mUBEdL6hevbs2fGd73wnZs+eHbNn\nz44jjjhC1olc6OjoiAcffDDSNI329vY4/vjjI0mS+MMf/hB33XWXLBO51K+0f88FaDr/8z//E9On\nT49BgwbFzTffHO9///vjd7/7XQwdOlTWicwqlUqxevXqSNM0Fi5cGEOGDIkkSWLKlCkxbNiwiIhY\nvXp1rF+/XpaJXDLSoImVSqW47rrr4uqrr45vfvOb8fnPf95LmmRaqVSKp556KtI0jTRNY+DAgXuH\n2cknn9zoy4Oq8nInNKkNGzbEzJkzY9u2bfHwww/7/Ccy7dlnn907zF5//fVIkiTuvPPOOO2009yF\nSWH5KzM0mT2fgTZixIg499xzDTQya/369TFr1qw444wzoq2tLbZu3Ro333xzrFu3Lq655po4/fTT\nDTQKzcud0ES2bNkSl19+efzyl7+MefPmxYgRIxp9SbCPjRs3xqJFiyJN0/jtb38bF110USRJEuee\ne27079+/0ZcHdeUkDZrEsmXL4rTTTosPfOAD8fOf/9xAIzO2bNkSN9xwQ7S1tcUpp5wSa9asiauv\nvjo2btwY119/fYwePdpAoyk5SYOCe+211+JLX/pSrFixIubOnRsf/ehHG31JENu2bYu77ror0jSN\nRx55JC644IJIkiTOP//8OOywwxp9eZAJbhyAAnvwwQdjxowZMWbMmFi7dm0cccQRjb4kmtj27dtj\n6dKlkaZprFy5Mtra2mLGjBmxaNGieOc739noy4PMcZIGBfTGG2/E17/+9fjRj34UN9xwQ3zyk59s\n9CXRpHbu3Bk//elPI03TuOeee+LDH/5wJEkSEyZMiHe9612NvjzINCdpUDBr1qyJadOmxYknnhhr\n166NIUOGNPqSaDJ7skxpmsaSJUti+PDhkSRJXHvttf59hDI4SYOCeHvWac6cOfGZz3zGxxNQNwfL\nMk2aNCne9773NfryIJecpEEBvD3r9POf/zze//73N/qSaAIHyzI9/vjje7NMQN8ZaZBjsk7U28Gy\nTCtWrJBlgioz0iCnZJ2oJ1kmqD9/5YaceXvW6S/+4i8MNGpGlgkay40DkCOyTtSaLBNkh5M0yAlZ\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x112cad150>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "G= nx.DiGraph()\n",
    "layers = ['1','2','3']\n",
    "G.add_nodes_from([1,2],layer='1')\n",
    "G.add_nodes_from([3],layer='2')\n",
    "G.add_nodes_from([4],layer='3')\n",
    "G.add_edges_from([(1,3),(2,3),(3,4),(1,4),(2,4)])\n",
    "nx.draw(G, pos= {1:(0,1),2:(0,-1),3:(1,0),4:(2,0)})\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "input_nodes = [1,2]\n",
    "output_nodes = [4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(1, {'layer': '1'}),\n",
       " (2, {'layer': '1'}),\n",
       " (3, {'layer': '2'}),\n",
       " (4, {'layer': '3'})]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# input data\n",
    "d_in = [[0,0],[0,1],[1,0],[1,1]]\n",
    "G.nodes(data=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def sigmoid(x):\n",
    "    re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, {'layer': '1'})\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "sigmoid() takes exactly 1 argument (0 given)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-13-8f89e715570f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mnode\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0md\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0md\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mG\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnodes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mTrue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0md\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'layer'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mlayer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m         \u001b[0;32mprint\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m         \u001b[0mG\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'val'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0msigmoid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m: sigmoid() takes exactly 1 argument (0 given)"
     ]
    }
   ],
   "source": [
    "for layer in layers:\n",
    "    for node in [(n,d) for (n,d) in G.nodes(data=True) if (d['layer'] == layer)]:\n",
    "        print node\n",
    "        G.node[node[0]]['val']= sigmoid()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
